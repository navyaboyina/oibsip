import numpy as np
import pandas as pd
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Load the California Housing dataset
california = fetch_california_housing()
X = pd.DataFrame(california.data, columns=california.feature_names)
y = pd.Series(california.target)

# Preprocess the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train a Linear Regression model using scikit-learn
lin_reg = LinearRegression()
lin_reg.fit(X_train, y_train)
y_pred_sk = lin_reg.predict(X_test)
mse_sk = mean_squared_error(y_test, y_pred_sk)
print(f'Scikit-learn Linear Regression MSE: {mse_sk}')

# Train a Neural Network model using TensorFlow
model = Sequential([
    Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    Dense(64, activation='relu'),
    Dense(1)
])

model.compile(optimizer='adam', loss='mse')
model.fit(X_train, y_train, epochs=100, batch_size=32, validation_split=0.2, verbose=1)

y_pred_tf = model.predict(X_test)
mse_tf = mean_squared_error(y_test, y_pred_tf)
print(f'TensorFlow Neural Network MSE: {mse_tf}')
